async function generateAi() {
  try {
      if (isGenerating) {
        console.log('Die Funktion wird bereits ausgef√ºhrt. Bitte warten Sie.');
        alert("Das Bild wird bereits generiert. Bitte warten Sie.")
        return;
      }

      if (inputAI.value.trim() === "") {
        console.log('Bitte geben Sie einen Text ein.');
        alert("Bitte geben Sie einen Text ein.")
        return;
      }

      if (inputAI.value.trim().toLowerCase() === "dev" || inputAI.value.trim().toLowerCase() === "developer") {
        devMode(true);
        return;
      }

      isGenerating = true;
      svg.style.display = 'none';
      canvas.style.display = 'none';
      roundButtonContainer.style.display = 'none';

      // Ladeanimation
      imagePreview.src = 'static/images/buffering.gif'; 
      imagePreview.style.display = 'block';

      const prompt = inputAI.value;
      const sketchDataUrl = canvas.toDataURL();

      const response = await fetch(`/generate_ai?prompt=${encodeURIComponent(prompt)}`, {
          method: 'GET',
          headers: {
              'Content-Type': 'application/json',
          },
      });
      const data = await response.json();

      if (response.ok) {
          const imageDatas = data.image_data_list;

          // Display the first generated image (you can loop through imageDatas if there are multiple)
          const imageData = imageDatas[0];

          // Create an Image object
          const img = new Image();

          // Set the source to the base64-encoded image data
          img.src = `data:image/png;base64,${imageData}`;

          // Wait for the image to load
          img.onload = function() {
            handleImage(img);
          };
      } else {
          console.error('Error generating AI image:', data.error);
      }
  } catch (error) {
    console.error('Error when generating AI image:', error);
    imagePreview.style.display = 'none';
  } finally {
    // Freigebe die Sperre, wenn die Funktion beendet ist
    isGenerating = false;
  }
}
